<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/halo"
         xmlns:view="com.scuttlebutt.view.*" 
         styleName="AppStyle" width="100%" height="100%" minWidth="360" minHeight="220"
         initialize="onInit(event);"
         creationComplete="onComplete(event);" >
    
    <fx:Script>
        <![CDATA[
            import com.scuttlebutt.model.User;
            import com.scuttlebutt.utils.AvatarUtil;
            import com.scuttlebutt.managers.AppManager;
            import com.scuttlebutt.view.AudioVisualizer;
            
            import flash.display.Bitmap;
            import flash.events.Event;
            
            import flash.events.MouseEvent;
            
            import mx.core.UIComponent;
            
            import flash.events.Event;
            import flash.events.SampleDataEvent;
            import flash.events.StatusEvent;
            import flash.media.Microphone;
            import flash.media.Sound;
            import flash.media.SoundChannel;
            import flash.utils.ByteArray;
            import flash.utils.Endian;
            
            private var userAvatar : Bitmap;
            private  var userAvatarHolder : UIComponent ;
            private var peerAvatar : Bitmap;
            private  var peerAvatarHolder : UIComponent ;
            
            [Bindable]
            private var _peer : User = new User;
            
            [Bindable] 
            private var micNames:Array = Microphone.names;
            
            private var recordedData:ByteArray;
            
            private var mic:Microphone;
            private var sound:Sound;      
            
            private function onInit( event:Event ) : void
            {
                this.showTitleBar = false;
                this.showStatusBar = false;
                this.showGripper = false;
                this.title = "ScuttleButt Voice Chat";
                this.systemChrome =  NativeWindowSystemChrome.NONE;
                this.transparent = true;
                this.resizable = true;
                
                windowTitleBar.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownHandler);
            }
            
            private function onComplete( event : Event ) : void
            {
                stage.nativeWindow.addEventListener(Event.CLOSE, closeHandler );
                //trace("[NEW USER ITEM MADE]");
                userAvatar = new Bitmap();
                peerAvatar = new Bitmap();
                
                peerAvatarHolder = new UIComponent();
                peerAvatarHolder.addChild(peerAvatar);
                
                userAvatarHolder = new UIComponent();
                userAvatarHolder.addChild(userAvatar);
                
                peerImage.addChild(peerAvatarHolder);
                userImage.addChild(userAvatarHolder);
            }
            
            private function onMouseDownHandler( event : MouseEvent ) : void
            {
                this.stage.nativeWindow.startMove();
            }
            
            private function minimizeHandler( event : Event = null ) : void
            {
                this.stage.nativeWindow.minimize();
            }
            
            private function closeHandler( event : Event = null ) : void
            {   
                this.visible = false;
            }
            
            private function resizeHandler() : void
            {
                this.stage.nativeWindow.startResize(NativeWindowResize.BOTTOM_RIGHT);
            }
            
            public function setVisibility( val : Boolean = true ) : void
            {
                this.visible = val;
            }
            
            public function set peer(val:User) : void
            {
                this._peer = val;
                peerAvatar.bitmapData = AvatarUtil.convertStringtoAvatar(_peer.avatar);
                userAvatar.bitmapData = AvatarUtil.convertStringtoAvatar(AppManager.getInstance().settings._user.avatar);
                
                userName.text = AppManager.getInstance().settings._user.name;
                peerName.text = _peer.name;
            }
            
            private function startVoiceChat():void
            {
                recordedData = new ByteArray();
                
                mic = Microphone.getMicrophone( micNamesCombo.selectedIndex );
                mic.rate = 44;
                
                mic.addEventListener(SampleDataEvent.SAMPLE_DATA, dataHandler); 
            }
            
            private function stopVoiceChat():void
            {
                if (!mic)
                    return;
                
                userVisualization.stop();
                mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, dataHandler);
            }
            
            private function dataHandler(event:SampleDataEvent):void
            { 
                userVisualization.drawMicBar(mic.activityLevel, 0xE44972);
                recordedData.writeBytes(event.data);                 
            }
            
            private function playVoiceChat():void
            {
                recordedData.position = 0;
                sound = new Sound();
                sound.addEventListener(SampleDataEvent.SAMPLE_DATA, playSoundHandler);
                
                var channel:SoundChannel;
                channel = sound.play();
                channel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);
                userVisualization.start();
            }
            
            private function onPlaybackComplete(event:Event):void 
            {
                userVisualization.stop();
            }
            
            private function playSoundHandler(event:SampleDataEvent):void
            {
                if (!recordedData.bytesAvailable > 0)
                    return;
                
                var length:int = 8192; // Change between 2048 and 8192
                for (var i:int = 0; i < length; i++)
                {
                    var sample:Number = 0;
                    
                    if (recordedData.bytesAvailable > 0)
                        sample = recordedData.readFloat();
                    
                    event.data.writeFloat(sample);
                    event.data.writeFloat(sample);
                }
            }
            
        ]]>
    </fx:Script>

    <mx:VBox id="windowPane" width="100%" height="100%" styleName="AppUIStyle">
        <mx:HBox id="windowTitleBar" styleName="titleBarStyle" width="100%">
            <mx:Image  source="@Embed('assets/images/light/icon-small.png')"/>
            <mx:Label styleName="windowTitle" text="Voice Chat with {_peer.name}"/>
            <mx:Spacer width="100%"/>     
            <mx:SWFLoader source="@Embed('assets/beatwidget.swf')" width="20" height="20"/>
            <mx:Button styleName="minimizeButton" toolTip="Minimize" click="minimizeHandler();"/>		
            <mx:Button styleName="closeButton" toolTip="Close" click="closeHandler();"/>
        </mx:HBox>     
       
        <mx:HBox width="100%">
            <mx:HBox styleName="avatarBoxStyle" verticalAlign="middle" horizontalAlign="center">
                <mx:Image id="peerImage" horizontalAlign="left" verticalAlign="middle"  
                          width="48" height="48" scaleContent="true" smoothBitmapContent="true" />        
            </mx:HBox> 
            <mx:VBox width="100%" height="100%">
                <mx:Label id="peerName" text="" styleName="nameUserInfo" />
                <view:AudioVisualizer id="peerVisualization"/>
            </mx:VBox>
            <mx:Spacer width="100%"/>
        </mx:HBox>
        
        <mx:HBox width="100%">
            <view:AudioVisualizer width="10" id="userVisualization"/>
            <mx:Spacer width="100%"/>
            <mx:Label id="userName" text="" styleName="nameUserInfo" />
            <mx:HBox styleName="avatarBoxStyle" verticalAlign="middle" horizontalAlign="center">
                <mx:Image id="userImage" horizontalAlign="left" verticalAlign="middle"  
                          width="48" height="48" scaleContent="true" smoothBitmapContent="true" />        
            </mx:HBox>     
        </mx:HBox>
        
        <mx:Spacer height="100%"/>

        <mx:HBox width="100%">
            <mx:Button label="REC" width="30" click="startVoiceChat();"/>
            <mx:Button label="STP" width="30" click="stopVoiceChat();"/>
            <mx:Button label="|>" width="30" click="playVoiceChat();"/>
            <mx:ComboBox id="micNamesCombo" width="190" dataProvider="{micNames}"/>
        </mx:HBox>
        
        
        <mx:HBox width="100%" paddingBottom="6">
            <mx:Spacer width="100%"/>
            <mx:Image source="@Embed('assets/images/light/gripper.png')" mouseDown="resizeHandler();"
                      buttonMode="true" mouseEnabled="true" useHandCursor="true" />	                    
        </mx:HBox>
    </mx:VBox>
</mx:Window>

